// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace azureauth.Entities
{
    public partial class MgsmasterdbContext : DbContext
    {
        public MgsmasterdbContext()
        {
        }

        public MgsmasterdbContext(DbContextOptions<MgsmasterdbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ProductLookup> ProductLookups { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<VehicleLookup> VehicleLookups { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=NITESHPC;Initial Catalog=MgsMasterDb;User ID=sa;Password=nitesh18");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ProductLookup>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("PK_Product");

                entity.Property(e => e.ProductName).IsUnicode(false);

             
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.MobileNo).IsUnicode(false);

                entity.Property(e => e.UserType).IsUnicode(false);

                entity.Property(e => e.Username).IsUnicode(false);
            });

            modelBuilder.Entity<VehicleLookup>(entity =>
            {
                entity.HasKey(e => e.VehicleId)
                    .HasName("PK_Vehicle");

                entity.Property(e => e.Availablity).IsUnicode(false);

                entity.Property(e => e.VehicleName).IsUnicode(false);

                entity.Property(e => e.VehicleType).IsUnicode(false);

            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.MoblieContact).IsUnicode(false);

                entity.Property(e => e.ServiceType).IsUnicode(false);

                entity.Property(e => e.TelephoneContact).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}